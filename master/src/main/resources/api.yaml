openapi: 3.0.0

servers:
  - url: http://{host}:{port}/orion/v0.1
    variables:
      host:
        default: localhost
        description: Server domain
      port:
        default: "8080"
        description: Server port

info:
  description: This is the RESTful APIs of the ORION Distributed Computing Framework
  version: "1.0.0"
  contact:
    email: tharindu.bandara.edu@gmail.com
    name: Tharindu Bandara
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  title: ORION RESTful APIs
tags:
  - name: Client Admin
    description: Secured for client admin calls
paths:
  /task-limits:
    get:
      tags:
        - Client Admin
      summary: provide resource limits of a worker
      operationId: getTaskLimitations
      description: |
        You can obtain resource limitations of a worker such as RAM. Based on that, the submitting job can be planned.
      responses:
        '200':
          description: task resources limits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskLimits'
        '404':
          description: Could not find limitations
  /submit:
    post:
      tags:
        - Client Admin
      summary: submit a task to the orion
      operationId: submitTask
      description: |
        You can submit a task to the orion
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                executableShellScript:
                  type: string
                  description: name of the executable script
                outputFiles:
                  type: string
                  description: names of the output files required after execution
                resourceRequirements:
                  type: string
                  description: |
                    <resource-type>=<upper-limit-in-GBs>. Currently supported resource types: ram, storage
                  example: ram=2
                filename:
                  type: array
                  items:
                    $ref: '#/components/schemas/BinaryFile'
      responses:
        '202':
          description: task submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmittedTask'
        '400':
          description: task cannot be executed by orion. consult with orion task limitations
  /tasks/{task-id}/files:
    get:
      tags:
        - Client Admin
      summary: download processed files from orion
      operationId: downloadFiles
      description: |
        You can download files from the orion
      parameters:
        - in: path
          name: task-id
          schema:
            type: string
            format: uuid
          required: true
          description: unique id of the task where files belogs to
        - in: query
          name: filename
          schema:
            type: string
          required: true
          description: name of the downloading file
          example: out.txt
      responses:
        '200':
          description: output file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: |
            cannot download the file. Either the task failed or still processing
        '404':
          description: couldn't find the file
  /tasks/{task-id}/monitor:
    get:
      tags:
        - Client Admin
      summary: monitor submitted task
      operationId: monitorFiles
      description: |
        You can monitor the status of the submitted task
      parameters:
        - in: path
          name: task-id
          schema:
            type: string
            format: uuid
          required: true
          description: unique id of the task
      responses:
        '200':
          description: status of the task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorResult'
        '404':
          description: couldn't find the task
  /get-state:
    get:
      tags:
        - Client Admin
      summary: provide current state of the master
      operationId: getState
      description: |
        You can obtain master state data.
      responses:
        '200':
          description: master state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterStatus'
        '404':
          description: Could not find any state

components:
  schemas:
    ClusterStatus:
      type: object
      properties:
        restEndpoint:
          type: array
          items:
            $ref: '#/components/schemas/MonitorResult'
        priorityQueue:
          type: array
          items:
            $ref: '#/components/schemas/MonitorResult'
        workerPool:
          type: array
          items:
            $ref: '#/components/schemas/MonitorResult'
        centralStore:
          type: array
          items:
            $ref: '#/components/schemas/MonitorResult'
    BinaryFile:
      type: string
      format: binary
    SubmittedTask:
      type: object
      properties:
        taskId:
          type: string
          format: uuid
          description: unique id for the submitted task
          example: 123e4567-e89b-12d3-a456-426614174000
        status:
          $ref: '#/components/schemas/SubmittedTaskStatus'
          description: an enum for the submitted task status
          example: inprogress
    MonitorResult:
      type: object
      properties:
        taskId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/SubmittedTaskStatus'
        workerId:
          type: string
    SubmittedTaskStatus:
      type: string
      enum:
        - inprogress
        - successful
        - failed
    TaskLimits:
      type: object
      properties:
        limits:
          type: array
          items:
            $ref: '#/components/schemas/Property'
          description: Additional properties may sent by the server.
    Property:
      type: object
      properties:
        key:
          type: string
          example: storage
          description: Any key value of the property.
        value:
          type: string
          example: 5
          description: Value of the property.